{"componentChunkName":"component---src-templates-blog-post-template-js","path":"/2021/2021-7-25-Collapsible-Search-Filter/","result":{"data":{"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Collapsible Search Filter\",\n  \"date\": \"2021-07-25T00:00:00.000Z\",\n  \"published\": true,\n  \"cover\": \"./ecoTravelFilter.png\",\n  \"variables\": \"./variables.js\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"This is a collapsible filter based on a filter I made while working at Ecomadic. The look is simple/clean and the UX is intuitive and pleasing while offering a lot of options.\\nSkip to the bottom of the page and check it out ;)\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"react-live\",\n    \"react-live\": true\n  }, \"function filter() {\\n  const defBusinessTypes = React.useRef([\\n    \\\"eco-accommodations\\\",\\n    \\\"ethical experiences\\\",\\n    \\\"Resposible Travel Curators\\\",\\n    \\\"socially responsible eateries\\\",\\n  ]);\\n\\n  const countryNames = React.useRef([\\n    \\\"Hong Kong\\\",\\n    \\\"India\\\",\\n    \\\"Indonesia\\\",\\n    \\\"Kenya\\\",\\n    \\\"Laos\\\",\\n    \\\"Malaysia\\\",\\n    \\\"Philippines\\\",\\n    \\\"United States Of America\\\",\\n  ]);\\n\\n  const country = React.useRef({\\n    All: {\\n      BusinessTypes: [\\n        \\\"eco-accommodations\\\",\\n        \\\"ethical experiences\\\",\\n        \\\"Resposible Travel Curators\\\",\\n        \\\"socially responsible eateries\\\",\\n      ],\\n      Prices: [\\\"$\\\", \\\"$$\\\"],\\n      SearchString: \\\"SEARCH ASIAN BUSINESSES\\\",\\n    },\\n    \\\"Hong Kong\\\": {\\n      BusinessTypes: [\\\"eco-accommodations\\\"],\\n      Prices: [\\\"$\\\", \\\"$$\\\"],\\n      SearchString: \\\"SEARCH ASIAN BUSINESSES\\\",\\n    },\\n    India: {\\n      BusinessTypes: [\\n        \\\"eco-accommodations\\\",\\n        \\\"ethical experiences\\\",\\n        \\\"Resposible Travel Curators\\\",\\n        \\\"socially responsible eateries\\\",\\n      ],\\n      Prices: [\\\"$\\\", \\\"$$\\\"],\\n      SearchString: \\\"SEARCH ASIAN BUSINESSES\\\",\\n    },\\n    Indonesia: {\\n      BusinessTypes: [\\\"eco-accommodations\\\"],\\n      Prices: [\\\"$\\\", \\\"$$\\\"],\\n      SearchString: \\\"SEARCH ASIAN BUSINESSES\\\",\\n    },\\n    Kenya: {\\n      BusinessTypes: [\\\"Responsible Travel Curators\\\"],\\n      Prices: [\\\"$\\\"],\\n      SearchString: \\\"SEARCH ASIAN BUSINESSES\\\",\\n    },\\n    Laos: {\\n      BusinessTypes: [\\\"eco-accommodations\\\"],\\n      Prices: [\\\"$$$\\\"],\\n      SearchString: \\\"SEARCH ASIAN BUSINESSES\\\",\\n    },\\n    Malaysia: {\\n      BusinessTypes: [\\\"eco-accommodations\\\"],\\n      Prices: [\\\"$$$\\\"],\\n      SearchString: \\\"SEARCH ASIAN BUSINESSES\\\",\\n    },\\n    Philippines: {\\n      BusinessTypes: [\\\"eco-accommodations\\\", \\\"socially responsible eateries\\\"],\\n      Prices: [\\\"$$\\\"],\\n      SearchString: \\\"SEARCH ASIAN BUSINESSES\\\",\\n    },\\n    \\\"United States Of America\\\": {\\n      BusinessTypes: [\\\"eco-accommodations\\\"],\\n      Prices: [\\\"$$\\\"],\\n      SearchString: \\\"SEARCH ASIAN BUSINESSES\\\",\\n    },\\n  });\\n\\n  const [countryDropdownState, setCountryDopdownState] = React.useState([\\n    \\\"All\\\",\\n  ]);\\n  const [countryChevronState, setCountryChevronState] = React.useState(false);\\n  const [businessChevronState, setBusinessChevronState] = React.useState(false);\\n  const [businessDropdownState, setBusinessDropdownState] = React.useState([\\n    \\\"All\\\",\\n  ]);\\n  const [priceChevronState, setPriceChevronState] = React.useState(false);\\n  const [priceDropdownState, setPriceDropdownState] = React.useState([\\\"All\\\"]);\\n  const [businessTypesState, setBusinessTypesState] = React.useState(\\n    defBusinessTypes.current\\n  );\\n  const [priceState, setPriceState] = React.useState([\\n    \\\"all prices\\\",\\n    \\\"under $200\\\",\\n    \\\"$200 - $500\\\",\\n    \\\"over $500\\\",\\n  ]);\\n  const countriesRef = React.useRef([]);\\n  const businessesRef = React.useRef([]);\\n  const pricesRef = React.useRef([]);\\n\\n  function toggleCountryChevron() {\\n    setCountryChevronState(!countryChevronState);\\n  }\\n  function toggleBusinessChevron() {\\n    setBusinessChevronState(!businessChevronState);\\n  }\\n  function togglePriceChevron() {\\n    setPriceChevronState(!priceChevronState);\\n  }\\n  function selectCountry(place) {\\n    if (countryDropdownState[0] === \\\"All\\\") {\\n      let array = [];\\n      array.push(place);\\n      setCountryDopdownState(array);\\n      let selectArray = countriesRef.current.childNodes;\\n      for (let i = 0; i < selectArray.length; i++) {\\n        let el = selectArray[i].firstChild;\\n\\n        if (el.innerHTML === place) {\\n          el.classList.add(\\\"bold\\\");\\n        }\\n      }\\n      const string = country.current[place][\\\"BusinessTypes\\\"];\\n      setBusinessTypesState(string);\\n    } else {\\n      if (countryDropdownState.includes(place)) {\\n        let selectArray = countriesRef.current.childNodes;\\n        let newDropDownState = null;\\n        for (let i = 0; i < selectArray.length; i++) {\\n          let el = selectArray[i].firstChild;\\n          if (el.innerHTML === place) {\\n            el.classList.remove(\\\"bold\\\");\\n            let array = [...countryDropdownState];\\n            let index = countryDropdownState.indexOf(el.innerHTML);\\n            array.splice(index, 1);\\n            setCountryDopdownState(array);\\n            newDropDownState = array;\\n          }\\n        }\\n        if (countryDropdownState.length === 1) {\\n          setCountryDopdownState([\\\"All\\\"]);\\n          setBusinessTypesState(defBusinessTypes.current);\\n        } else if (countryDropdownState.length > 1) {\\n          let dropDownArray = [...newDropDownState];\\n          let typeArray = [];\\n          for (let i = 0; i < dropDownArray.length; i++) {\\n            let el = dropDownArray[i];\\n            const addArray = country.current[el][\\\"BusinessTypes\\\"];\\n            for (let j = 0; j < addArray.length; j++) {\\n              let type = addArray[j];\\n              if (!typeArray.includes(type)) {\\n                typeArray.push(type);\\n              }\\n            }\\n          }\\n          setBusinessTypesState(typeArray);\\n        }\\n      } else {\\n        let array = [...countryDropdownState];\\n        array.push(place);\\n        setCountryDopdownState(array);\\n        let selectArray = countriesRef.current.childNodes;\\n        for (let i = 0; i < selectArray.length; i++) {\\n          let el = selectArray[i].firstChild;\\n\\n          if (el.innerHTML === place) {\\n            el.classList.add(\\\"bold\\\");\\n          }\\n        }\\n        const string = country.current[place][\\\"BusinessTypes\\\"];\\n        if (businessTypesState === defBusinessTypes.current) {\\n          setBusinessTypesState(string);\\n        } else {\\n          let array = [...businessTypesState];\\n          const arrayTwo = country.current[place][\\\"BusinessTypes\\\"];\\n          for (let i = 0; i < arrayTwo.length; i++) {\\n            let el = arrayTwo[i];\\n            if (!array.includes(el)) {\\n              array.push(el);\\n            }\\n          }\\n          setBusinessTypesState(array);\\n        }\\n      }\\n    }\\n  }\\n  function deleteCountrySelection() {\\n    setCountryDopdownState([\\\"All\\\"]);\\n    setCountryChevronState(false);\\n    setBusinessChevronState(false);\\n    setBusinessTypesState([\\n      \\\"eco-accommodations\\\",\\n      \\\"ethical experiences\\\",\\n      \\\"Resposible Travel Curators\\\",\\n      \\\"socially responsible eateries\\\",\\n    ]);\\n  }\\n  function selectBusinessType(business) {\\n    if (businessDropdownState[0] === \\\"All\\\") {\\n      let array = [];\\n      array.push(business);\\n      setBusinessDropdownState(array);\\n      let selectArray = businessesRef.current.childNodes;\\n      for (let i = 0; i < selectArray.length; i++) {\\n        let el = selectArray[i].firstChild;\\n        if (el.innerHTML === business) {\\n          el.classList.add(\\\"bold\\\");\\n        }\\n      }\\n    } else {\\n      if (businessDropdownState.includes(business)) {\\n        let index = businessDropdownState.indexOf(business);\\n        let selectArray = businessesRef.current.childNodes;\\n        for (let i = 0; i < selectArray.length; i++) {\\n          let el = selectArray[i].firstChild;\\n\\n          if (el.innerHTML === business) {\\n            el.classList.remove(\\\"bold\\\");\\n          }\\n        }\\n        let array = [...businessDropdownState];\\n        array.splice(index, 1);\\n        if (array.length < 1) {\\n          setBusinessDropdownState([\\\"All\\\"]);\\n        } else {\\n          setBusinessDropdownState(array);\\n        }\\n      } else {\\n        let array = [...businessDropdownState];\\n        array.push(business);\\n        setBusinessDropdownState(array);\\n        let selectArray = businessesRef.current.childNodes;\\n        for (let i = 0; i < selectArray.length; i++) {\\n          let el = selectArray[i].firstChild;\\n          if (el.innerHTML === business) {\\n            el.classList.add(\\\"bold\\\");\\n          }\\n        }\\n      }\\n    }\\n  }\\n  function selectPrice(price) {\\n    if (priceDropdownState[0] === \\\"All\\\") {\\n      let array = [];\\n      array.push(price);\\n      setPriceDropdownState(array);\\n      let selectArray = pricesRef.current.childNodes;\\n      for (let i = 0; i < selectArray.length; i++) {\\n        let el = selectArray[i].firstChild.innerHTML;\\n        if (array.includes(el)) {\\n          selectArray[i].firstChild.classList.add(\\\"bold\\\");\\n        }\\n      }\\n    } else {\\n      if (!priceDropdownState.includes(price)) {\\n        let array = [...priceDropdownState];\\n        array.push(price);\\n        setPriceDropdownState(array);\\n        let selectArray = pricesRef.current.childNodes;\\n        for (let i = 0; i < selectArray.length; i++) {\\n          let el = selectArray[i].firstChild.innerHTML;\\n          if (array.includes(el)) {\\n            selectArray[i].firstChild.classList.add(\\\"bold\\\");\\n          }\\n        }\\n      } else {\\n        if (priceDropdownState.length === 1) {\\n          setPriceDropdownState([\\\"All\\\"]);\\n\\n          let selectArray = pricesRef.current.childNodes;\\n          for (let i = 0; i < selectArray.length; i++) {\\n            selectArray[i].firstChild.classList.remove(\\\"bold\\\");\\n          }\\n        } else if (priceDropdownState.length > 1) {\\n          let priceDDSArray = [...priceDropdownState];\\n          let selectArray = pricesRef.current.childNodes;\\n          let index = priceDDSArray.indexOf(price);\\n          priceDDSArray.splice(index, 1);\\n          setPriceDropdownState(priceDDSArray);\\n          for (let i = 0; i < selectArray.length; i++) {\\n            let el = selectArray[i].firstChild;\\n            if (el.innerHTML === price) {\\n              el.classList.remove(\\\"bold\\\");\\n            }\\n          }\\n        }\\n      }\\n    }\\n  }\\n  function deletePriceSelection() {\\n    setPriceDropdownState([\\\"All\\\"]);\\n    setPriceChevronState(false);\\n  }\\n\\n  return (\\n    <div className={\\\"explore-filter\\\"}>\\n      <div className={\\\"explore-filter-top\\\"}>\\n        <span className={\\\"explore-filter-title\\\"}>Eco Travel Filter</span>\\n      </div>\\n      <div className={\\\"explore-filter-section\\\"}>\\n        <span className={\\\"explore-filter-section-span\\\"}>\\n          COUNTRY:\\n          {countryDropdownState[0] !== \\\"All\\\"\\n            ? countryDropdownState.length < 2\\n              ? ` ${countryDropdownState[0]}`\\n              : \\\" ...\\\"\\n            : \\\" All\\\"}\\n        </span>\\n        {countryDropdownState[0] !== \\\"All\\\" && (\\n          <div\\n            className={\\\"explore-filter-section-delete\\\"}\\n            onClick={deleteCountrySelection}\\n          />\\n        )}\\n        {countryChevronState ? (\\n          <div class={\\\"down-outlined turnUp\\\"} onClick={toggleCountryChevron} />\\n        ) : (\\n          <div className={\\\"down-outlined\\\"} onClick={toggleCountryChevron} />\\n        )}\\n      </div>\\n      <div\\n        ref={countriesRef}\\n        className={`country-box-open ${\\n          !countryChevronState ? \\\"box-cosed\\\" : \\\"\\\"\\n        }`}\\n      >\\n        {countryChevronState &&\\n          countryNames.current.map((name, index) => {\\n            return (\\n              <div key={index} className={\\\"explore-filter-selection\\\"}>\\n                <span\\n                  className={\\\"explore-filter-selection-span fade-in\\\"}\\n                  onClick={() => {\\n                    selectCountry(name);\\n                  }}\\n                >\\n                  {name}\\n                </span>\\n              </div>\\n            );\\n          })}\\n      </div>\\n      <div className={\\\"explore-filter-section\\\"}>\\n        <span className={\\\"explore-filter-section-span\\\"}>\\n          BUSINESS TYPE: {businessDropdownState[0] !== \\\"All\\\" ? \\\"...\\\" : \\\"All\\\"}\\n        </span>\\n        {businessChevronState ? (\\n          <div class={\\\"down-outlined turnUp\\\"} onClick={toggleBusinessChevron} />\\n        ) : (\\n          <div className={\\\"down-outlined\\\"} onClick={toggleBusinessChevron} />\\n        )}\\n      </div>\\n      <div\\n        ref={businessesRef}\\n        className={`business-box-open ${\\n          !businessChevronState ? \\\"box-cosed\\\" : \\\"\\\"\\n        }`}\\n      >\\n        {businessChevronState &&\\n          businessTypesState.map((type, index) => {\\n            return (\\n              <div key={index} className={`explore-filter-selection`}>\\n                <span\\n                  className={`explore-filter-selection-span fade-in`}\\n                  onClick={() => selectBusinessType(type)}\\n                >\\n                  {type}\\n                </span>\\n              </div>\\n            );\\n          })}\\n      </div>\\n\\n      <div className={\\\"explore-filter-section\\\"}>\\n        <span className={\\\"explore-filter-section-span\\\"}>\\n          PRICE: {priceDropdownState[0] === \\\"All\\\" ? \\\"All\\\" : \\\"...\\\"}\\n        </span>\\n        {priceDropdownState[0] !== \\\"All\\\" && (\\n          <div\\n            className={\\\"explore-filter-section-delete\\\"}\\n            onClick={deletePriceSelection}\\n          />\\n        )}\\n        {priceChevronState ? (\\n          <div class={\\\"down-outlined turnUp\\\"} onClick={togglePriceChevron} />\\n        ) : (\\n          <div className={\\\"down-outlined\\\"} onClick={togglePriceChevron} />\\n        )}\\n      </div>\\n      <div\\n        ref={pricesRef}\\n        className={`price-box-open ${!priceChevronState ? \\\"box-cosed\\\" : \\\"\\\"}`}\\n      >\\n        {priceChevronState &&\\n          priceState.map((price, index) => {\\n            return (\\n              <div key={index} className={\\\"explore-filter-selection\\\"}>\\n                <span\\n                  className={\\\"explore-filter-selection-span ex-price fade-in\\\"}\\n                  onClick={() => {\\n                    selectPrice(price);\\n                  }}\\n                >\\n                  {price}\\n                </span>\\n              </div>\\n            );\\n          })}\\n      </div>\\n\\n      <div className={\\\"explore-filter-last-section\\\"}>\\n        <div className={\\\"explore-filter-search\\\"}>\\n          <div className={\\\"magGlass\\\"} />\\n          <input\\n            className={\\\"explore-filter-input\\\"}\\n            type={\\\"text\\\"}\\n            placeholder={\\\"SEARCH ECO BUSINESSES\\\"}\\n          />\\n        </div>\\n      </div>\\n    </div>\\n  );\\n}\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"Collapsible Search Filter","date":"2021 July 25th"}}},"pageContext":{"slug":"/2021/2021-7-25-Collapsible-Search-Filter/","previous":{"fields":{"slug":"/2021/2021-6-01-VolumeUiFader/"},"frontmatter":{"title":"Mix Meld Volume Fader"}},"next":null}},"staticQueryHashes":["4080856488"]}